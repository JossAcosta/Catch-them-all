{"version":3,"sources":["assets/images/Spin.gif","assets/images/pokeball.svg","components/Navbar.js","components/PokemonCard.js","components/PokemonList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","Component","PokemonCard","state","id","name","imageUrl","this","props","url","split","length","setState","imageLoading","toLowerCase","map","s","charAt","toUpperCase","substring","join","src","Spin","style","width","onLoad","PokemonList","pokemon","catched","inputPokemonName","change","e","target","value","axios","get","res","pokemondb","data","action","preventDefault","pkName","newPokemon","push","showNewPokemon","singleCatched","single","includes","Fragment","placeholder","onChange","type","onClick","index","key","Pokeball","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f30c2221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spin.33dbecea.gif\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.6b4ffa55.svg\";","import React, { Component} from 'react';\r\nimport './styles/Navbar.css';\r\n\r\nexport default class Navbar extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"navbar\">PoKÃ©-Api</div>\r\n        )\r\n    }\r\n}","import React, { Component} from 'react';\r\nimport Spin from '../assets/images/Spin.gif'\r\nimport './styles/PokemonCard.css'\r\n\r\n\r\nclass PokemonCard extends Component {\r\n    state={\r\n        id: '',\r\n        name:'',\r\n        imageUrl: '',\r\n    }\r\n    componentDidMount(){\r\n        const {name, url} = this.props;\r\n        const id = url.split(\"/\")[url.split(\"/\").length -2];\r\n        const imageUrl = `https://github.com/PokeAPI/sprites/blob/master/sprites/pokemon/${id}.png?raw=true`;\r\n        this.setState({\r\n            id,\r\n            name,\r\n            imageUrl,\r\n            imageLoading: true,\r\n        });\r\n    }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"card_container\">\r\n       <h5 className=\"card_id\">PokemonID: {this.state.id}</h5>\r\n       <h1 className=\"card_name\">{this.state.name\r\n              .toLowerCase()\r\n              .split(' ')\r\n              .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n              .join(' ')\r\n       }\r\n       </h1>\r\n\r\n       <div className=\"card_img\"> {this.state.imageLoading ? (\r\n           <img src= {Spin} style={{width:'5rem'}}></img>\r\n       ) : null}\r\n        <img  onLoad ={()=>this.setState({imageLoading:false})} src= {this.state.imageUrl}></img></div>\r\n\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PokemonCard;\r\n","import React, { Component} from 'react';\r\nimport axios from 'axios';\r\nimport './styles/PokemonList.css';\r\nimport PokemonCard from './PokemonCard'\r\nimport Pokeball from '../assets/images/pokeball.svg'\r\n\r\nexport default class PokemonList extends Component {\r\n    state = {\r\n        url:'https://pokeapi.co/api/v2/pokemon/?offset=0&limit=150',\r\n        pokemon: '',\r\n        catched: '',\r\n        inputPokemonName:'',\r\n    };\r\n    change = (e)=>{\r\n        this.setState({\r\n            inputPokemonName:e.target.value,\r\n        })\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        const res = await axios.get(this.state.url);\r\n        const pokemondb = res.data['results'];\r\n        this.action =(e) =>{\r\n            e.preventDefault()\r\n        const pkName = this.state.inputPokemonName.toLowerCase();\r\n        const newPokemon = [...this.state.catched]\r\n        newPokemon.push(pkName)\r\n        this.setState({catched:newPokemon });\r\n        const showNewPokemon = [];\r\n        if(newPokemon){\r\n            newPokemon.map(singleCatched => {\r\n                pokemondb.map(single => {\r\n                    if(single.name.includes(singleCatched)) {\r\n                        showNewPokemon.push(single);\r\n                    }\r\n                    \r\n                 }); \r\n            })\r\n            this.setState({\r\n                pokemon:showNewPokemon})\r\n        }\r\n    };       \r\n    }\r\n    render(){\r\n        return(\r\n        <React.Fragment>\r\n            <div className=\"container_form\">\r\n               <div className=\"c-formContainer\">\r\n                 <form className=\"c-form\" >\r\n                    <input \r\n                    className=\"c-form__input\" \r\n                    placeholder=\"Pokemon Name\" \r\n                    value={this.state.inputPokemonName}\r\n                    onChange = {this.change}\r\n                    name = \"pokemonName\">\r\n                    </input>\r\n                    <button className=\"c-form__button\" type=\"button\" \r\n                    onClick={this.action} >Cath it!\r\n                    </button>  \r\n                </form>\r\n             </div>\r\n            </div>\r\n\r\n            <div className=\"list_container\">\r\n\r\n            {this.state.pokemon ? \r\n               (\r\n               <div className=\"pokemon_list\"> \r\n                { \r\n                this.state.pokemon.map((pokemon, index) => (\r\n                    <PokemonCard \r\n                    key={index}\r\n                    name= {pokemon.name}\r\n                    url = {pokemon.url}\r\n                    />))   \r\n                }\r\n                </div>)\r\n                : (<div className=\"list_empty\" >\r\n                <h1 >No pokemon captured yet! </h1>\r\n                <img src= {Pokeball} className=\"pokeball rotate\" style={{width:'20rem'}}></img>\r\n                </div>)\r\n            }\r\n            </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component} from 'react';\nimport Navbar from './components/Navbar';\nimport PokemonList from './components/PokemonList';\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <Navbar />\n        <PokemonList/>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}